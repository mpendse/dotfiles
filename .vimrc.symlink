"""" BASIC OPTIONS 

" Line numbers
set nu

" Autoindent
set ai
filetype indent on

" Ruler
set ruler

" Case insensitive search
set ignorecase smartcase

" Highlight search terms
set incsearch hlsearch

" Backspace behavior
set backspace=indent,eol,start

" Filetype and syntax specific settings
filetype plugin on
syntax on

" 4 column tabs
set ts=4
set sw=4
" softtabstop - causes backspace to delete the correct number of spaces
" in insert mode
set sts=4 
set expandtab

" Fed up of folding
" Folding
" set fdm=syntax
" set foldlevelstart=1

" Language specific folds
" augroup python_fold
"     autocmd!
"     au FileType python set fdm=indent
" augroup END

" Keep status line always
set laststatus=2

" Omnicomplete
set omnifunc=syntaxcomplete#Complete

" Getting to arbitrary positions FTW!
set mouse=a

" Working with buffers
" Allow changing buffer without saving it first
set hidden

" Have 5 lines of context always above and below the cursor
set scrolloff=5

" Better tab completion in the command line
set wildmode=longest,list,full
set wildmenu

" Check for local tag file first and then in parent directory then check till /
set tags=tags,./tags;/

" Don't redraw while executing macros
set lazyredraw

" Space leader
map <Space> <Leader>

" Cscope
if has('cscope')
    set cscopeverbose
    set cscopequickfix=s-,c-,d-,i-,t-,e-
    if filereadable("cscope.out")
        " Try catch block because this fails if the database is already added
        try
            silent cs add cscope.out
        catch
            " Do nothing
        endtry
    endif
endif

" Match angle brackets for cpp files
augroup angle_bracket
    autocmd!
    autocmd FileType cpp setl matchpairs+=<:>
augroup END


"""" PLUGINS

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !mkdir -p ~/.vim/autoload
  silent !curl -fLo ~/.vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

" Build function for vimproc (post update hook for vim-plug)
function! BuildVimProc(info)
    if has("win32unix")
        :!make -f make_cygwin.mak
    elseif has("win32")
        " :!make -f make_mingw32.mak
        " It's possible this may not work
        :!tools\\update-dll-mingw
    elseif has("unix")
        let s:uname = system("uname -s")
        if !v:shell_error && s:uname == "Darwin\n"
            :!make -f make_mac.mak
        else
            :make
        endif
    else
        :echom 'unrecognized OS'
    endif
endfunction

call plug#begin('~/.vim/bundle')

" Bundles
if v:version >= 704
    Plug 'Valloric/YouCompleteMe', { 'do' : './install.sh --clang-completer' }
else
    " Plug 'Shougo/neocomplcache.vim'
endif
Plug 'tpope/vim-commentary'
Plug 'bling/vim-airline'
Plug 'vim-scripts/pythoncomplete', { 'for' : 'python' }
Plug 'flazz/vim-colorschemes'
Plug 'ervandew/supertab'
" Plug 'scrooloose/nerdtree'
Plug 'altercation/vim-colors-solarized'
Plug 'tpope/vim-fugitive'
Plug 'justinmk/vim-sneak'
Plug 'wellle/targets.vim'
Plug 'Shougo/unite.vim'
Plug 'Shougo/vimproc.vim', { 'do' : function('BuildVimProc') }
Plug 'Shougo/neomru.vim'
" Plug 'terryma/vim-smooth-scroll'
Plug 'tpope/vim-abolish'
Plug 'octol/vim-cpp-enhanced-highlight', { 'for' : 'cpp' }
Plug 'tpope/vim-surround'
Plug 'tsukkee/unite-tag'
Plug 'Shougo/unite-outline'
Plug 'sjl/gundo.vim', { 'on' : 'GundoToggle' }
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'sickill/vim-monokai'
Plug 'jonathanfilip/vim-lucius'
Plug 'chriskempson/base16-vim'
Plug 'sickill/vim-pasta'
Plug 'vim-scripts/ViewPort', { 'on' : 'Vpedit' }
Plug 'mhinz/vim-startify'
Plug 'mpendse/vim-interestingwords'
Plug 'whatyouhide/vim-gotham'
" Plug 'tpope/vim-vinegar'
Plug 'jeetsukumaran/vim-filebeagle'
Plug 'haya14busa/incsearch.vim'
Plug 'junegunn/fzf', { 'dir' : '~/.fzf', 'do': './install', 'on' : 'FZF' }
Plug 'ajh17/Spacegray.vim'
" Plug 'vasconcelloslf/vim-interestingwords'
" Plug 'tpope/vim-dispatch'
" Plug 'gregsexton/gitv'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-capslock'
Plug 'nelstrom/vim-qargs', {'on' : 'Qargs'}
Plug 'w0ng/vim-hybrid'
Plug 'jiangmiao/auto-pairs'
Plug 'ludovicchabant/vim-gutentags'
Plug 'mpendse/unite-search-history'
" Plug 'Shougo/neocomplete.vim'   " Requires Vim 7.3.885+ and Lua enabled.
" Plug 'kien/ctrlp.vim'
" Plug 'LaTeX-Box-Team/LaTeX-Box'
" Plug 'vim-scripts/AutoComplPop'

call plug#end()

"""" PLUGIN SETTINGS

" Neocomplete settings " Requires Vim 7.3.885+ and Lua enabled.
" let g:neocomplete#enable_at_startup = 1
" let g:neocomplete#enable_smart_case = 1

if v:version < 704 
    " NeoComplCache settings
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_smart_case = 1
endif

augroup python_complete
    autocmd!
    autocmd FileType python set omnifunc=pythoncomplete#Complete
augroup END

" Supertab settings
let g:SuperTabDefaultCompletionType = "<c-n>"

" Fed up of problems with smoothscroll
" disable smoothscroll in diff mode (it is slow as it is)
" if !&diff
"     " smoothscroll mappings
"     nnoremap <silent> <c-u> :call smooth_scroll#up(&scroll, 5, 2)<CR>
"     nnoremap <silent> <c-d> :call smooth_scroll#down(&scroll, 5, 2)<CR>
"     nnoremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 5, 4)<CR>
"     nnoremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 5, 4)<CR>
" endif

" Override for latex filetype. (used with LaTex-Box plugin)
" let g:tex_flavor='latex'

" Airline settings
let g:airline_theme='dark'
"
" Ignore trailing whitespaces, but look out for mixed indents
let g:airline#extensions#whitespace#checks = [ 'indent' ]

" Removing separators
let g:airline_left_sep=''
let g:airline_right_sep=''

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show buffer numbers
let g:airline#extensions#tabline#buffer_nr_show = 1

" Put hostname before filename
function! GetHostname()
    let hostname = system("hostname")
    return hostname[:-2] . ' â”‚ '
endfunction

function! AirlineInit()
    call airline#parts#define_function('hostname', 'GetHostname')
    call airline#parts#define_minwidth('hostname', 80)      " show hostname only if width >= 80
    let g:airline_section_c = airline#section#create(['hostname', 'file'])
endfunction
au VimEnter * call AirlineInit()

" Unite settings
" Use fuzzy matcher for everything
call unite#filters#matcher_default#use(['matcher_fuzzy'])

" Yank history enable
let g:unite_source_history_yank_enable = 1

" File search
nnoremap <Leader>f :<C-u>Unite -start-insert -buffer-name=files file directory file_rec/async:!<CR>

" MRU search
nnoremap <Leader>r :<C-u>Unite -start-insert -buffer-name=mru file_mru<CR>

" Buffer list
nnoremap <Leader>b :<C-u>Unite -start-insert -buffer-name=buffers buffer<CR>

" Grep from cwd
nnoremap <Leader>g :<C-u>Unite -no-quit -winheight=10 -buffer-name=grep grep:.<CR>

" Yank history
nnoremap <Leader>h :<C-u>Unite -buffer-name=yanks history/yank<CR>

" Tags
nnoremap <Leader>t :<C-u>Unite -start-insert -buffer-name=tags tag<CR>

" Outline
nnoremap <Leader>o :<C-u>Unite -winwidth=40 -buffer-name=outline -vertical outline<CR>

" Search for text in all open buffers
nnoremap <Leader>s :<C-u>Unite -start-insert -custom-grep-search-word-highlight=Normal 
            \-buffer-name=buffer-search grep:$buffers::.<CR>

" Search for text in current buffer
nnoremap <Leader>l :<C-u>Unite -start-insert -buffer-name=line line<CR>

" Search history
nnoremap q/ :<C-u>Unite -start-insert -buffer-name=search_history search_history<CR>

" Set up some custom ignores
call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.git/',
      \ 'tmp/',
      \ '.pyc',
      \ '.swp',
      \ 'tags',
      \ ], '\|'))

" use fuzzy matcher for line
call unite#custom#source('line', 'matchers', 'matcher_fuzzy')

" Custom mappings for the unite buffer
augroup unite
    autocmd!
    autocmd FileType unite call s:unite_settings()
augroup END

function! s:unite_settings()
    " Play nice with supertab
    let b:SuperTabDisabled=1
    " Enable navigation with control-j and control-k in insert mode
    imap <buffer> <C-j>   <Plug>(unite_select_next_line)
    imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction

if v:version >= 704 
    " YouCompleteMe settings
    let g:ycm_confirm_extra_conf = 0
    let g:ycm_autoclose_preview_window_after_completion = 1
    " Turning this off because I got bored of the lag 
    let g:ycm_show_diagnostics_ui = 0
    " let g:ycm_enable_diagnostic_signs = 1
    nnoremap <Leader>jd :YcmCompleter GoTo<CR>
else
    nnoremap <Leader>jd <nop>
endif

" Gundo
nnoremap <Leader>u :GundoToggle<CR>

" Hijacking f and t to call sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
" omap f <Plug>Sneak_f
" omap F <Plug>Sneak_F

nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
" omap t <Plug>Sneak_t
" omap T <Plug>Sneak_T

" Clever S mode
let g:sneak#s_next = 1

" Case determined by ignorecase / smartcase
let g:sneak#use_ic_scs = 1

" Targets.vim settings
" Using 'q' as an alias for double quotes
let g:targets_quotes = '"q '' `'

" Settings for making UltiSnips/Supertab/Youcomplete play nice with each other
" Found on StackOverflow.
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsJumpForwardTrigger = "<c-n>"
let g:UltiSnipsJumpBackwardTrigger = "<c-p>"

" vim-pasta settings
" Enable the indent-aware-paste only on c and cpp files.
let g:pasta_enabled_filetypes = ['c', 'cpp']

" vim-viewport (like narrow-region)
vnoremap <Leader>vp :Vpedit<CR>

" vim-startify settings
let g:startify_session_dir = '~/sessions'
let g:startify_list_order = [ ['Sessions'], 'sessions']
let g:startify_change_to_dir = 0
let g:startify_custom_header = [
            \ '',
            \ '',
            \ '                         VIM - Vi IMproved                       ',
            \ '                                                                 ',
            \ '                            version 7.4                          ',
            \ '                     by Bram Moolenaar et al.                    ',
            \ '            Vim is open source and freely distributable          ',
            \ '',
            \ '',
            \ ]

" vim-interestingwords mappings
let g:interestingWordsDefaultMappings = 0 " This disables its default mappings (only on my fork)
let g:interestingWordsRandomiseColors = 1
nnoremap <silent> <Leader>c :call InterestingWords()<CR>
nnoremap <silent> <Leader>C :call UncolorAllWords()<CR>

" Improved incsearch settings
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
" Sometimes I prefer the low tech search
noremap g/ /
noremap g? ?

" vim-filebeagle (instead of irritating netrw buffers)
let g:filebeagle_suppress_keymaps = 1
map <silent> - <Plug>FileBeagleOpenCurrentBufferDir

" auto-pairs
" only enable for curly braces 
let g:AutoPairs  = { '{':'}' }

" Trying out vim-gutentags : seamless tag management
let g:gutentags_project_root = ['.git']
let g:gutentags_exclude = [ 'build', '.git', '.swp', 'log' ]
let g:gutentags_generate_on_missing = 0     " Don't generate tags if none exist

"""" MAPPINGS

" Copy Paste from system clipboard
vnoremap <Leader>y "+y
nnoremap <Leader>y "+y
vnoremap <Leader>Y "+Y
nnoremap <Leader>Y "+Y
vnoremap <Leader>d "+d
nnoremap <Leader>d "+d
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
vnoremap <Leader>p "+p
vnoremap <Leader>P "+P

" Move up/down display lines instead of actual lines
noremap j gj
noremap k gk

" Move up/down actual lines whenever necessary
noremap gj j
noremap gk k

" Quit all, useful in vimdiff
nnoremap <Leader>q :qa<CR>

" Working with buffers
nnoremap ]b :bnext<CR>
nnoremap [b :bprevious<CR>

" Keep text centered when searching
" and open fold if hit is inside fold
nnoremap n nzzzv
nnoremap N Nzzzv

" Disable ex mode key
nnoremap Q <nop>

" Disable command history
nnoremap q: <nop>

" Replay macro for each line of a visual selection
xnoremap @q :normal @q<CR>

" Repeat last command for each line of a visual selection
" This breaks the n . (next match and repeat) workflow (<op-pending>gn should 
" still work I think)
" xnoremap . :normal .<CR>

" Map [[ to [{ for cpp files because it is easier to move to parent block
augroup cpp_parent_block
    autocmd!
    autocmd FileType cpp,c noremap <buffer> [[ [{
    autocmd FileType cpp,c noremap <buffer> ]] ]}
augroup END

augroup build_or_run
    autocmd!
    " Make
    au FileType cpp,c nnoremap <silent> <buffer> <F9> :call BuildInSubDir("build/gcc-debug")<CR>
    " Run
    au FileType python nnoremap <silent> <buffer> <F9> :!./%<CR>
augroup END
    
" Navigating quickfix list
nnoremap <silent> ]q :cnext<CR>
nnoremap <silent> [q :cprevious<CR>

inoremap jj <Esc>
inoremap jk <Esc>
inoremap kj <Esc>

" Moving around splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" IntelligentQuit, :Q works for closing 
" windows and buffers both
command! -bang Q :call IntelligentQuit(<bang>0)

" Abbreviation only works if it is a ':' command and 'q'(or wq) is in the first
" column. q calls the Q command, which calls IntelligentQuit().
" Also works with q! (it expands to Q!), and doesn't work with qa (doesn't
" expand to Qa). wq works as expected.
cnoreabbrev q <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Q' : 'q')<CR>
cnoreabbrev wq <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'w\|Q' : 'wq')<CR>

" Switch to .h file if on .cpp file, or vice versa
nnoremap <silent> <Leader>a :call AlternateSourceFile()<CR>

" Standardized the behaviour of D
nnoremap D d$

" Standardized the behaviour of Y
nnoremap Y y$

" H: Go to beginning of line.
noremap H ^

" L: Go to end of line
noremap L g_

" Toggle search highlighting
nnoremap <silent> <Leader><Space> :noh<CR>

" Don't open manual
nnoremap K <nop>

" Don't clobber the unnamed register when pasting over text in visual mode. 
vnoremap p pgvy

" Center curzor on opening all folds
nnoremap zR zRzz

" Insert blank line above or below.
" the mark prevents from losing cursor position and
" the set paste mode temporarily turns off auto indent, so a 
" comment character isn't entered if the mapping is triggered 
" from within a comment.
nnoremap <silent> [<Space> :set paste<CR>m`O<Esc>``:set nopaste<CR>
nnoremap <silent> ]<Space> :set paste<CR>m`o<Esc>``:set nopaste<CR>

" Don't move on *
nnoremap <silent> * :let stay_star_view = winsaveview()<CR>*:call winrestview(stay_star_view)<CR>

" :cq quits vim without throwing a 'files changed' error (equivalent to
" :qall!). Unfortunately, :cw opens the quickfix list and I suck at typing. Shutting up cq.
cnoreabbrev cq <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? '' : 'cq')<CR>

" Expands %% to current file's directory in command-line mode
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>

""" AUTOCOMMANDS
" (that don't fit into any above categories)

if v:version >= 704 
    " Switching between hybrid numbering and absolute numbering mode
    augroup numbering
        autocmd!
        autocmd InsertLeave,VimEnter,WinEnter,FocusGained * set relativenumber number
        autocmd InsertEnter,WinLeave,FocusLost * set relativenumber!
    augroup END
endif

" Cursorline only in normal mode and when window is focused.
augroup cursorline
    autocmd!
    au BufWinEnter,FocusGained,WinEnter,InsertLeave * set cul
    au FocusLost,WinLeave,InsertEnter * set nocul
augroup END

" Open quickfix window on top
" Also 'q' quits, mimicking unite.
augroup quickfix_on_top
    autocmd!
    au FileType qf wincmd K
    au FileType qf nmap <buffer> q :q<CR>
augroup END

" Fed up of folds
" Remembers my folds when switching between buffers. Keeps only one view
" per file. This shouldn't be necessary, but apparently there is some plugin
" which folds everything I had unfolded before I left a buffer (because this
" doesn't happen with vim -u NONE) and I'm too lazy to track down 
" which plugin is responsible.
" TODO Figure out a way to delete the created view file
" TODO Doesn't work always
" augroup please_keep_my_fold_state
"     autocmd!
"     if !&diff
"         set viewoptions="folds,cursor"
"         autocmd BufWinLeave * if expand("%") != "" | mkview! | endif
"         autocmd BufWinEnter * if expand("%") != "" | loadview | endif
"     endif
" augroup END

"""" FUNCTIONS

function! IntelligentQuit(ignore_changes)
    " Closes the window if more than one window, deletes a buffer if
    " more than one buffer. Else calls :q
    let num_bufs = len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) 
    let window_count = winnr('$')
    if( window_count > 1)
        :hide
        return
    endif
    if( num_bufs == 1 )
        if(a:ignore_changes == 1)
            :q!
        else
            :q
        endif
    else
        if(a:ignore_changes == 1)
            :bd!
        else
            :bd
        endif
    endif
endfunc

function! BuildInSubDir(buildsubdir)
    " Runs make in the passed subdirectory (under the
    " toplevel project dir) 
    let toplevelpath = FindTopLevelProjectDir()
    let builddir = toplevelpath . a:buildsubdir
    :execute 'make -j32 -C ' . builddir
    cw
endfunction

function! FindTopLevelProjectDir()
    " Searches for a .git directory upward till root.
    let isittopdir = finddir('.git') 
    if isittopdir ==? ".git"
        return getcwd() . '/'
    endif
    let gitdir = finddir('.git', ';')
    let gitdirsplit = split(gitdir, '/')
    let toplevelpath = '/' . join(gitdirsplit[:-2],'/') . '/'
    return toplevelpath
endfunction

function! AlternateSourceFile()
    " If on a .cpp file, switches to its .h file, or vice versa.
    if(expand('%:p:t:e') ==? "cpp")
        :find %:p:r.h
    elseif(expand('%:p:t:e') ==? "h")
        :find %:p:r.cpp
    endif
endfunction

" ClangCheck
function! ClangCheckImpl(cmd)
    if &autowrite | wall | endif
    echo "Running " . a:cmd . " ..."
    let l:output = system(a:cmd)
    cexpr l:output
    cwindow
    let w:quickfix_title = a:cmd
    if v:shell_error != 0
      cc
    endif
    let g:clang_check_last_cmd = a:cmd
endfunction

function! ClangCheck(buildpath)
    let l:filename = expand('%')
    let toplevelpath = FindTopLevelProjectDir()
    if l:filename =~ '\.\(cpp\|cxx\|cc\|c\)$'
        call ClangCheckImpl("clang-check " . l:filename . " -p " . toplevelpath . a:buildpath)
    elseif exists("g:clang_check_last_cmd")
        call ClangCheckImpl(g:clang_check_last_cmd)
    else
        echo "Can't detect file's compilation arguments and no previous clang-check invocation!"
    endif
endfunction

nnoremap <silent> <F5> :call ClangCheck("build/gcc-debug")<CR>

" Basic Ack (till I cave and install the plugin)
function! Ack(args)
    let efm_bak = &efm
    set efm=%f:%l:%m
    let cmd = "ack-grep --nocolor --nogroup --ignore-dir=build " . a:args
    cexpr system(cmd)
    let &efm = efm_bak
    copen
endfunction

command! -nargs=* -complete=file Ack call Ack(<q-args>)

function! JumpOnePage(forward)
    let l:currentfile = expand('%:p')
    while l:currentfile ==# expand('%:p')
        try
            let l:originalPosition = join(getpos("."), ":")

            " the addition of the count makes it work somehow instead of just
            " calling <C-i>.
            execute 'normal!' 1 . (a:forward ? "\<C-i>" : "\<C-o>")

            " if the position is the same after a successful jump then assume
            " the end of the jumplist has been reached
            if l:currentfile ==# expand('%:p')
                if l:originalPosition ==# join(getpos("."), ":")
                    break
                endif
            endif
        catch /^Vim\%((\a\+)\)\=:/
            " A Vim error occurs when there's an invalid jump position.
            echom "wtf"
            break
        endtry
    endwhile
endfunction

nnoremap <silent> <C-p> :call JumpOnePage(0)<CR>
nnoremap <silent> <C-n> :call JumpOnePage(1)<CR>

"""" COLORSCHEMES

" 256 terminal colours
" Not needed if your term variable shows a 256 colour terminal.
" set t_Co=256

" Colorschemes
" colo 256-grayvim
" colo random
" colo anotherdark
set bg=dark
" let g:solarized_termcolors=256
colo Tomorrow-Night-Eighties
let g:airline_theme='tomorrow'
" let g:zenburn_high_Contrast = 1
" colo zenburn
" colo wombat256
" colo jellybeans

if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif

" Project specific settings
if filereadable(".vimrc.project")
    source .vimrc.project
endif

"""" STUFF FROM SENSIBLE.VIM

if &listchars ==# 'eol:$'
    set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

if &history < 1000
    set history=1000
endif
if &tabpagemax < 50
    set tabpagemax=50
endif
if !empty(&viminfo)
    set viminfo^=!
endif
set sessionoptions-=options

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
    runtime! macros/matchit.vim
endif

inoremap <C-U> <C-G>u<C-U>

if &encoding ==# 'latin1' && has('gui_running')
    set encoding=utf-8
endif

if !&scrolloff
    set scrolloff=1
endif
if !&sidescrolloff
    set sidescrolloff=5
endif
set display+=lastline

if &shell =~# 'fish$'
    set shell=/bin/bash
endif

set nrformats-=octal

"""" GUI SETTINGS 

if has('gui_running')
    " No menu/tool bar in gvim
    set guioptions-=m
    set guioptions-=T
    " console-like dialogs instead of graphical popup.
    set guioptions+=c
    colo base16-default
    let g:airline_theme='base16'
endif

